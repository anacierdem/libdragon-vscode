name: RSP MIPS assembly

# The build replaces these variables in the upcoming strings when a {{variable}}
# is found. This is useful to avoid repetition and to make the file more readable.

variables:
  symbol: |-
    (?:(?:\b[A-z_.][0-9A-z_.$]*\b)|(?:\$[0-9A-z_.$]*\b)|(?:\.[0-9A-z_.$]+\b)|\.)
  label: |-
    (?:{{symbol}}:)
  directive: |-
    (?:\.[0-9A-z_\.$]*\b)
  instruction: |-
    (?:\b[A-z_$][0-9A-z_\.$]*\b)
  line_separator: |-
    (?:$|;)
  escape_pattern: |-
    (?:\\(?:[abfnrt\\"]|x[0-9a-fA-F]+|[0-9]{3}))
  integer: |-
    (?:\b(?:(?:0b[01]+)|(?:0x[0-9a-fA-F]+)|(?:0[0-7])|(?:(?:[1-9][0-9]*)|0))\b)
  sub_expression: |-
    (?:(?:\()(?:.*?)(?:\)))
  infix_operator: |-
    (?:[*/%|&^!<>+\-]|(?:<<)|(?:>>)|(?:==)|(?:<>)|(?:!=)|(?:>=)|(?:<=))
  # Looks like a + is also accepted in contrast to the documentation.
  prefix_operator: |-
    (?:[~+\-])

# With textmate, it is best to try to eagerly tokenize everything. This will
# result in better highlighting. It is possible to do some parsing but it becomes
# very complicated to maintain very quickly for very little gain. It can be even
# worse b/c once the pattern does not match, highlighting will stop.
# Instead if we tokeneize everything, we can parse bigger structures at a later
# pass as necessary without loosing any information in the process.
# To give an example, you can build patterns that will only match series of
# operands and categorize the operators in between as infix operators. But this
# will stop tokenization once the pattern is broken by say adding an unknown token.
# Instead it is better to put as much as possible into the patterns array.
# So to summarize the aim is best effort tokenization while using the context
# information to an extent where you don't loose any tokens. See strings and
# sub expressions for good examples.

patterns:
- include: "#statement"

repository:
  comments:
    patterns:
    - name: comment.line.number-sign
      begin: "#"
      end: "$"
    - name: comment.block
      begin: "\\/\\*"
      end: "\\*\\/"

  symbol:
    name: support.variable
    match: >-
      {{symbol}}

  symbol_modifier:
    match: >-
      (%(?:lo)|(?:hi))
    captures:
      '1':
        name: storage.modifier

  label:
    name: support.function.label
    match: >-
      {{label}}

  directive:
    name: support.function.directive
    match: >-
      {{directive}}
    # TODO: add known directives for different highlights

  instruction:
    name: support.function.instruction
    match: >-
      {{instruction}}
    captures:
      '0':
        patterns:
          - include: "#not_impl_inst"

  operand_separator:
    match: >-
      ,
    captures:
      '0':
        name: punctuation.separator

  infix_operator:
    name: keyword.operator.infix
    match: >-
      (?<=(?:\b|\))\s*){{infix_operator}}

  prefix_operator:
    name: keyword.operator.prefix
    match: >-
      {{prefix_operator}}

  escaped_character:
    match: >-
      {{escape_pattern}}
    name: constant.character.escape

  string:
    begin: |-
      \"
    end: |-
      \"
    beginCaptures:
      '0':
        name: punctuation.definition.string.begin
    endCaptures:
      '0':
        name: punctuation.definition.string.end
    patterns:
    # Once a pattern is matched after the begin, it will override the end match
    # allowing easy extension of the current token
    - include: "#escaped_character"
    name: string.quoted.double

  character:
    name: string.quoted.single
    begin: >-
      '
    # as allows ending the character with a ' but it is not mandatory
    # try to consume as much as possible without leaking into the next line
    end: >-
      (')|(?<=[^'])(?:\b)|$
    beginCaptures:
      '0':
        name: punctuation.definition.string.begin
    endCaptures:
      '1':
        name: punctuation.definition.string.end
    patterns:
    - match: >-
        {{escape_pattern}}|(\\')
      name: constant.character.escape

  integer:
    name: constant.numeric
    match: |-
      {{integer}}

  argument:
    patterns:
    - include: "#integer"
    - include: "#symbol"
    - include: "#sub_expression"
    - include: "#character"
    - include: "#string"

  # This is a made up class representing anything can be written one after
  # the other in an instruction or an expression. This will force a best
  # effort tokenization.
  operand:
    patterns:
    - include: "#comments"
    - include: "#argument"
    - include: "#symbol_modifier"
    # infix operator only activates when there is an operand before it
    # that's why I search for it first.
    - include: "#infix_operator"
    - include: "#prefix_operator"
    - include: "#operand_separator"

  sub_expression:
    begin: |-
      \(
    end: |-
      \)
    beginCaptures:
      '0':
        name: punctuation.paren.open
    endCaptures:
      '0':
        name: punctuation.paren.close
    patterns:
    - include: "#operand"

  not_impl_inst:
    name: invalid.illegal
    match: >-
      \b(?:ldl|ldr|lwl|lwr|lwu|swl|sdl|sdr|swr|ll|lld|ldc1|ldc2|ld|sdc1|sdc2|sd|sc|scd|beql|bnel|blezl|bgtzl|bltzl|bgezl|bltzall|bgtzall|bgezall|mfhi|mthi|mflo|mtlo|daddi|daddiu|dsllv|dsrlv|dsrav|dmult|dmultu|ddiv|ddivu|dadd|daddu|dsub|dsubu|dsll|dsrl|dsra|dsll32|dsrl32|dsra32|mult|multu|div|divu|syscall|sync|bc1f|bc1t|tge|tgeu|tlt|tltu|teq|tne|tgei|tgeiu|tlti|tltiu|teqi|tnei)\b

  # This is the main parsing unit. It aims at reliably finding individual
  # statements as defined by as.
  statement:
    begin: >-
      (?:^|(?<=;))
      (?:\s*)
      ((?:{{label}}\s*)*)
      (?:({{symbol}})?)
    end: >-
      {{line_separator}}
    beginCaptures:
      '1':
        patterns:
        - include: "#label"
      '2':
        patterns:
        - include: "#instruction"
        - include: "#directive"
    endCaptures:
      '0':
        name: punctuation.terminator
    patterns:
    - include: "#operand"

scopeName: source.mips.rsp
